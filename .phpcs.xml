<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Example Project"
	xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/PHPCSStandards/PHP_CodeSniffer/master/phpcs.xsd">

	<description>A custom set of rules to check for a WPized WordPress project</description>

	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Annotated-Ruleset
	#############################################################################
	-->

	<file>.</file>

	<!-- Exclude WP Core folders and files from being checked. -->
	<exclude-pattern>/docroot/wp-admin/*</exclude-pattern>
	<exclude-pattern>/docroot/wp-includes/*</exclude-pattern>
	<exclude-pattern>/docroot/wp-*.php</exclude-pattern>
	<exclude-pattern>/docroot/index.php</exclude-pattern>
	<exclude-pattern>/docroot/xmlrpc.php</exclude-pattern>
	<exclude-pattern>/docroot/wp-content/plugins/*</exclude-pattern>

	<!-- Exclude the Composer Vendor directory. -->
	<exclude-pattern>/vendor/*</exclude-pattern>

	<!-- Exclude the Node Modules directory. -->
	<exclude-pattern>/node_modules/*</exclude-pattern>

	<!-- Exclude minified Javascript files. -->
	<exclude-pattern>*.min.js</exclude-pattern>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="." />

	<!-- Check up to 8 files simultaneously. -->
	<arg name="parallel" value="2" />

    <config name="php_version" value="8.1"/>

	<!--
	#############################################################################
	SET UP THE RULESETS
	#############################################################################
	-->

    <!-- Added manually -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <rule ref="Generic.NamingConventions.AbstractClassNamePrefix"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage" />

    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing" />
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing" />
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall"/>
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse"/>
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration"/>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint" />

    <rule ref="Squiz.NamingConventions.ValidVariableName.NotCamelCaps"/>
    <rule ref="Squiz.NamingConventions.ValidVariableName" />

    <!-- Added manually -->

	<rule ref="PSR1"/>
	<rule ref="Generic.Arrays.ArrayIndent"/>

	<!-- All PHP files MUST use the Unix LF (linefeed) line ending only. -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- All PHP files MUST end with a non-blank line, terminated with a single LF. -->
    <rule ref="PSR2.Files.EndFileNewline"/>

    <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
    <rule ref="PSR2.Files.ClosingTag"/>

		<!-- There MUST NOT be a hard limit on line length.
    The soft limit on line length MUST be 120 characters.
    Lines SHOULD NOT be longer than 80 characters; lines longer than that SHOULD be split into multiple subsequent lines of no more than 80 characters each. -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>

		<!-- There MUST NOT be trailing whitespace at the end of lines.
    Blank lines MAY be added to improve readability and to indicate related blocks of code except where explicitly forbidden. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>0</severity>
    </rule>

    <!-- There MUST NOT be more than one statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

		<!-- 2.4 Indenting -->

    <!-- Code MUST use an indent of 4 spaces for each indent level, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array">
                <element value="T_COMMENT"/>
                <element value="T_DOC_COMMENT_OPEN_TAG"/>
            </property>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

		<!-- 2.5 Keywords and Types -->

    <!-- All PHP reserved keywords and types [1][2] MUST be in lower case.
    Any new types and keywords added to future PHP versions MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseType"/>



    <!-- 4.4 Methods and Functions -->

    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!-- Method names MUST NOT be prefixed with a single underscore to indicate protected or private visibility. That is, an underscore prefix explicitly has no meaning. -->
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
        <message>Method name "%s" must not be prefixed with an underscore to indicate visibility</message>
    </rule>

    <!-- Method and function names MUST NOT be declared with space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

    <!-- 4.5 Method and Function Arguments -->

    <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <!-- When using the reference operator & before an argument, there MUST NOT be a space after it. -->
    <!-- There MUST NOT be a space between the variadic three dot operator and the argument name. -->
    <!-- When combining both the reference operator and the variadic three dot operator, there MUST NOT be any space between the two of them. -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>

    <!-- Method and function arguments with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.
    When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <!-- When you have a return type declaration present, there MUST be one space after the colon followed by the type declaration. The colon and declaration MUST be on the same line as the argument list closing parenthesis with no spaces between the two characters. -->
    <!-- checked by PSR12.Functions.ReturnTypeDeclaration -->

    <!-- In nullable type declarations, there MUST NOT be a space between the question mark and the type. -->
    <!-- checked by PSR12.Functions.NullableTypeDeclaration -->

		<!-- 4.6 abstract, final, and static -->

    <!-- When present, the abstract and final declarations MUST precede the visibility declaration. -->
    <!-- When present, the static declaration MUST come after the visibility declaration. -->
    <!-- checked by PSR2.Methods.MethodDeclaration included above -->

    <!-- 4.7 Method and Function Calls -->

    <!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. A single argument being split across multiple lines (as might be the case with an anonymous function or array) does not constitute splitting the argument list itself. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="PSR2.Methods.FunctionCallSignature"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PSR2.Methods.FunctionCallSignature.OpeningIndent">
        <severity>0</severity>
    </rule>

    <!-- 5. Control Structures -->

    <!-- The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    There MUST be one space between the closing parenthesis and the opening brace
    The structure body MUST be indented once
    The body MUST be on the next line after the opening brace
    The closing brace MUST be on the next line after the body
    The body of each structure MUST be enclosed by braces. This standardizes how the structures look and reduces the likelihood of introducing errors as new lines get added to the body. -->
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose"/>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterOpen">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingBeforeClose">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- exclude this message as it is already checked in Generic.PHP.LowerCaseKeyword -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.AsNotLower">
        <severity>0</severity>
    </rule>

    <!-- 5.1 if, elseif, else -->

    <!-- else and elseif are on the same line as the closing brace from the earlier body. -->
    <!-- checked by Squiz.ControlStructures.ControlSignature included above -->

    <!-- The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words. -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first condition MUST be on the next line. The closing parenthesis and opening brace MUST be placed together on their own line with one space between them. Boolean operators between conditions MUST always be at the beginning or at the end of the line, not a mix of both. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.2 switch, case -->

    <!-- The case statement MUST be indented once from switch, and the break keyword (or other terminating keywords) MUST be indented at the same level as the case body. There MUST be a comment such as // no break when fall-through is intentional in a non-empty case body. -->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first condition MUST be on the next line. The closing parenthesis and opening brace MUST be placed together on their own line with one space between them. Boolean operators between conditions MUST always be at the beginning or at the end of the line, not a mix of both. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.3.1 while -->

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first condition MUST be on the next line. The closing parenthesis and opening brace MUST be placed together on their own line with one space between them. Boolean operators between conditions MUST always be at the beginning or at the end of the line, not a mix of both. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.3.2 do while -->

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first condition MUST be on the next line. Boolean operators between conditions MUST always be at the beginning or at the end of the line, not a mix of both. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.4 for -->

    <!-- Expressions in parentheses MAY be split across multiple lines, where each subsequent line is indented at least once. When doing so, the first expression MUST be on the next line. The closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
    <!-- checked by PSR12.ControlStructures.BooleanOperatorPlacement -->
    <!-- checked by Squiz.ControlStructures.ControlSignature -->

    <!-- 5.5 foreach -->

    <!-- exclude these messages as they are already checked by PSR2.ControlStructures.ControlStructureSpacing -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceAfterOpen">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceBeforeClose">
        <severity>0</severity>
    </rule>

    <!-- 5.6 try, catch, finally -->

</ruleset>
